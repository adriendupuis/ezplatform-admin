<div>
    <p>Find good and bad examples for each field of a content type</p>
    <dl>
        <dt>Good Example</dt>
        <dd>A content having this optional field not empty, the maximum of other optional field not empty and no empty required field.</dd>
        <dt>Bad Example</dt>
        <dd>A content having this required field empty. (For example, it can happen when a field has become required but previous content haven't been updated.)</dd>
    </dl>
</div>
<fieldset>
    <legend>Content Type</legend>
    <select id="example_finder_content_type">
            <option value="">Select a content type…</option>
        {% for content_type_group in content_type_list %}
            <option disabled value="">{{ content_type_group.itself.identifier }}</option>
            {% for content_type in content_type_group.content_types %}
                <option value="{{ content_type.identifier }}">
                    {{ content_type.name }}
                </option>
            {% endfor %}
        {% endfor %}
        {# TODO: Remove before release #}<option value="unknown">Unknown content type!</option>
    </select>
</fieldset>
<style>
    {# TODO: Move to a .css file #}
    .bad-examples ul {
        margin: 0;
        padding: 0;
        list-style: none;
    }
</style>
<script>
    {# TODO: Move to a .js file #}
    {% set content_type_placeholder = '+content_type+' %}
    $(function() {
        let contentType, exampleFinder = new ExampleFinder(
            '{{ path('ad_admin.content_usage.example_finder.search', {content_type: content_type_placeholder}) }}'.replace('{{ content_type_placeholder }}', ''),
            '#example_finder_result', '#example_finder_status');
        $('#example_finder_content_type').val('').change(function() {
            if ($(this).val()) {
                $('#example_finder_status').text('Initializing field table…');
                contentType = $(this).val();
                $('#example_finder_result').load(
                    '{{ path('ad_admin.content_usage.example_finder.table', {content_type: content_type_placeholder}) }}'.replace('{{ content_type_placeholder }}', contentType),
                    function (response, status, xhr) {
                        if ('error' === status) {
                            $('#example_finder_status').text(xhr.statusText);
                            $('#example_finder_result').html('');
                        } else {
                            $('#example_finder_status').text('Ready to search…');
                            exampleFinder.setContentType(contentType).search();
                        }
                    }
                );
            }
        });
    });
    class ExampleFinder {
        constructor(baseUrl, tableElement, statusElement, limit=1/*TODO: 25*/) {
            this.baseUrl = baseUrl;
            this.tableElement = tableElement;
            this.statusElement = statusElement;
            this.setLimit(limit).resetSearch();
        }
        setContentType(contentType) {
            this.contentType = contentType;
            this.resetSearch();
            return this;
        }

        setLimit(limit) {
            this.limit = limit;
            return this;
        }
        increaseOffset() {
            this.offset += this.limit;
            return this.offset;
        }
        resetSearch() {
            this.offset = 0;
            this.examples = {};
            return this;
        }

        setTotalCount(totalCount) {
            this.totalCount = totalCount;
        }
        mergeExamples(examples) {
            for (let fieldDefIdentifier in examples) {
                let fieldExamples = examples[fieldDefIdentifier];
                if ('undefined' === typeof this.examples[fieldDefIdentifier]) {
                    this.examples[fieldDefIdentifier] = {};
                }
                if (fieldExamples.good) {
                    if (!this.examples[fieldDefIdentifier].best || this.examples[fieldDefIdentifier].good < fieldExamples.good.score) {
                        this.examples[fieldDefIdentifier].best = fieldExamples.good;
                    }
                }
                if (fieldExamples.bads) {
                    if (!this.examples[fieldDefIdentifier].bads) {
                        this.examples[fieldDefIdentifier].bads = Array.from(fieldExamples.bads);
                    }
                    this.examples[fieldDefIdentifier].bads.concat(fieldExamples.bads)
                }
            }
            console.log(this.examples);
            return this;
        }
        displayExamples() {
            for (let fieldDefIdentifier in this.examples) {
                let fieldExamples = this.examples[fieldDefIdentifier];
                if ('undefined' !== typeof fieldExamples.best) {
                    $('#' + fieldDefIdentifier).find('.best-example').empty().append(this.getExampleLinkElement(fieldExamples.best));
                }
                if ('undefined' !== typeof fieldExamples.bads) {
                    $('#' + fieldDefIdentifier).find('.bad-examples ul').empty();
                    for (let badExample of fieldExamples.bads) {
                        $('#' + fieldDefIdentifier).find('.bad-examples ul').append($('<li>').append(this.getExampleLinkElement(badExample)));
                    }
                }
            }
            return this;
        }
        getExampleLinkElement(example) {
            return $('<a>', {
                href: '{{ path('ez_urlalias', {'locationId': 2} ) }}/view/content/' + example.id
            }).html(example.name);
        }

        search() {
            let url = this.baseUrl + this.contentType + '/' + this.offset + '/' + this.limit;
            this.displayStatus('Searching…', true);
            $.getJSON(url, function(data, status, xhr) {
                if ('error' === status) {
                    //TODO
                    return;
                }
                if (data.totalCount) {
                    this.setTotalCount(data.totalCount);
                    this.mergeExamples(data.examples).displayExamples();
                    if (this.increaseOffset() < data.totalCount) {
                        this.search();
                    } else {
                        this.displayStatus('Displaying final result.', false);
                    }
                } else {
                    this.displayStatus('No content of this type.', false);
                }
            }.bind(this));
        }
        displayStatus(status, progress=false) {
            var status = status;
            if (progress && this.totalCount) {
                status = status + ' (' + Math.floor(100 * this.offset / this.totalCount) + '%)';
            }
            $(this.statusElement).text(status);
        }
    }
</script>
<div>Example Finder status: <em id="example_finder_status">Waiting for Content Type selection…</em></div>
<div id="example_finder_result"></div>